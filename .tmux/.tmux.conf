# .tmux.conf

## Shift to C-a, useful when using `vi` mode bash
## Avoid using C-a, if you use picocom/minicom like which escape by C-a
## Shift to ^x? NO if you use Emacs, nano, etc.

#set -g prefix M-x
#set -g prefix2 C-b
#bind C-b send-prefix
#unbind ^b
#set -g prefix ^x

# jump to the beginning of the line
bind a send-prefix
bind ` send-prefix

# Change the prefix key
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Set a shortcut for reloading tmux config
#bind r source-file ~/.tmux.conf
#Hit prefix + I to fetch the plugin and source it. You should now be able to use the plugin.
bind r source-file ~/.tmux.conf \; display "Reloaded!"

bind F7 set -g prefix C-b
bind F8 set -g prefix `

# Rename terminals
set -g set-titles on
set -g set-titles-string '#(whoami)@#h:#W'
set-option -g set-titles-string '[#S:#I #H] #W'
set -g set-titles-string "#H / #S"
## `#h` is $(hostname -s)
## `#W` is Window name


# If running inside tmux ($TMUX is set), then highlight
%if #{TMUX}
set -g status-bg red
%endif

# XXXX
# Keep windows around after they exit
#set -g remain-on-exit on

# Some extra key bindings to select higher numbered windows
bind F1 selectw -t:10
bind F2 selectw -t:11
bind F3 selectw -t:12
bind F4 selectw -t:13
bind F5 selectw -t:14
bind F6 selectw -t:15
bind F7 selectw -t:16
bind F8 selectw -t:17
bind F9 selectw -t:18
bind F10 selectw -t:19
bind F11 selectw -t:20
bind F12 selectw -t:21

# A key to toggle between smallest and largest sizes if a window is visible in
# multiple places
bind F set -w window-size

set -g history-limit 300000
# loud or quiet? visual notification of activity in other windows
# Notifying if other windows has activities
setw -g monitor-activity on
set -t0:0 monitor-activity on
set -g visual-activity on
set -g visual-bell off
set -g visual-silence off
# No bells at all
#set -g bell-action any
set -g bell-action none
# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

# Create a single default session - because a session is created here, tmux
# should be started with "tmux attach" rather than "tmux new"
#new -d -s0 -nirssi 'exec irssi'
#set  -t0:0 aggressive-resize on
#neww -d -ntodo 'exec emacs ~/TODO'
#setw -t0:1 aggressive-resize on
#neww -d -nmutt 'exec mutt'
#setw -t0:2 aggressive-resize on
###neww -d
###neww

bind z kill-session
bind h select-layout even-horizontal
bind v select-layout even-vertical

# resize-pane
bind -r C-h resize-pane -L
bind -r C-j resize-pane -D
bind -r C-k resize-pane -U
bind -r C-l resize-pane -R
#bind -r ^h resizep -L 2
#bind -r ^j resizep -D 2
#bind -r ^k resizep -U 2
#bind -r ^l resizep -R 2

# select-pane
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R
# swap pane
#bind ^u swapp -U
#bind ^d swapp -D

# L           Switch the attached client back to the last session.
# toggling windows with ctrl+a ctrl+a
bind C-a last-window
#bind ^g last-window

bind g select-window -l
#TODO: to clear in bash VI mode

# f           Prompt to search for text in open windows.
# #           List all paste buffers.
# -           Delete the most recently copied buffer of text.
# =           Choose which buffer to paste interactively from a list.
# ,           Rename the current window.
# '           Prompt for a window index to select.
# .           Prompt for an index to move the current window.
# 0 to 9      Select windows 0 to 9.
# &           Kill the current window.
# i           Display some information about the current window.
# l           Move to the previously selected window.
# n           Change to the next window.
# p           Change to the previous window.
# w           Choose the current window interactively.
# M-n         Move to the next window with a bell or activity marker.
# M-p         Move to the previous window with a bell or activity marker.
# ;           Move to the previously active pane.
# o           Select the next pane in the current window.
# x           Kill the current pane.
# {           Swap the current pane with the previous pane.
# }           Swap the current pane with the next pane.
# !           Break the current pane out of the window.
# C-o         Rotate the panes in the current window forwards.
# M-o         Rotate the panes in the current window backwards.
#             Change to the pane above, below, to the left, or to the right of the current pane.
# M-1 to M-5  Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.
# C-Up, C-Down
# C-Left, C-Right
#             Resize the current pane in steps of one cell.
# M-Up, M-Down
# M-Left, M-Right
#             Resize the current pane in steps of five cells.
# q           Briefly display pane indexes.
# :           Enter the tmux command prompt.
# ?           List all key bindings.
# [           Enter copy mode to copy text or view the history.
# Page Up     Enter copy mode and scroll one page up.
# Up, Down
# Left, Right
# ]           Paste the most recently copied buffer of text.
# C-z         Suspend the tmux client.
# $           Rename the current session.
# s           Select a new session for the attached client interactively.
# d           Detach the current client.
# D           Choose a client to detach.
# r           Force redraw of the attached client.
# t           Show the time.
# ~           Show previous messages from tmux, if any.

#If you have issues scrolling with Shift-Page Up/Down in your terminal, the following will remove the smcup and rmcup capabilities for any term that reports itself as anything beginning with xterm:
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'
# Enable RGB colour if running in xterm(1)
#set -sa terminal-overrides ",xterm*:Tc"

#This tricks the terminal emulator into thinking Tmux is a full screen application like pico or mutt[2], which will make the scrollback be recorded properly. Beware however, it will get a bit messed up when switching between windows/panes. Consider using Tmux's native scrollback instead.

# Works in copy-mode with scrollback with `prefix + [`
# To exit copy-mode, press q in vi mode or ESC in emacs mode;
#   or `Enter` or `Ctrl-C` in either mode

#Set the esc/alt disambiguation timeout
set -sg escape-time 10
#      - See https://github.com/neovim/neovim/wiki/FAQ

#  - ERROR: $TERM should be "screen-256color" or "tmux-256color" when running tmux.
#    - SUGGESTIONS:
#      - Set default-terminal in ~/.tmux.conf:
# Make sure tmux knows that terminal it is running in support 256 colors. You may tell it tmux by using -2 option when launching it.
# working with "screen-256color"
# Not working with "tmux-256color"
# Not working with "tmux+256color"
#      - See https://github.com/neovim/neovim/wiki/FAQ
set -g default-terminal "xterm-256color"
set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"

bind '~' split-window "exec htop"
bind m command-prompt "split-window 'exec man %%'"

# split panes using | and -
#unbind '"'
bind - split-window -v
#unbind '%'
bind | split-window -h
bind \ split-window -h
#bind | splitw -h

# Select prev/next pane
bind i select-pane -t :.-
bind o select-pane -t :.+

# Pane movement
bind J command-prompt -p "Join pane from:" "join-pane -s '%%'"
bind S command-prompt -p "Send pane to:" "join-pane -t '%%'"
# join-pane [-bdhv] [-l size | -p percentage] [-s src-pane] [-t dst-pane]
#       (alias: joinp)
#      Like split-window, but instead of splitting
#      dst-pane and creating a new pane, split it and
#      move src-pane into the space.  This can be used
#      to reverse break-pane.
# the full path takes 2 arguments: window_number.pane_number

bind -n M-tab next
bind -n F1 list-keys

#set -s exit-unattached off
#set -g set-remain-on-exit on

# anaconda environment
#new-session -s anaconda -n main "anaconda"
# END anaconda environment


# -- Options ------------------------------------------------------------{{{1
# make the first window number start at 1
set -g base-index 1

# don't rename windows automatically
set-option -g allow-rename off

#set -g default-command zsh

#set-environment -g LC_TMUX_SESSION 1

# -- Status bar ---------------------------------------------------------{{{1
#setw -g utf8 on
set -g status-utf8 on
set -g status on                # turn the status bar on
#set -g status-position top
#setw -g status-position top
set -g status-position bottom
#setw -g mode-keys vi
setw -g mode-keys vi
set -g status-keys vi

# show session name, window & pane number, date and time on right side
#set -g status-right "⮃ #(~/.myconf/tmuxstatusline.sh)"
set -g status-right "#[fg=blue]#(tmux-cpu --no-color)"
set -g status-right "#[fg=Cyan,Bright]#(cat /proc/loadavg | cut -d \" \" -f 1,2,3) %V.%u %m%d %R"
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]: %d %b %Y #[fg=green]: %l:%M %p : #(date -u | awk '{print $4}') :"
set -g status-right "#(uptime|awk '{print $11}') #(date)"
set -g status-attr dim
setw -g window-status-attr none
setw -g window-status-attr reverse
set -g window-status-current-attr "underscore"
setw -g window-status-current-attr bright,reverse
setw -g window-status-current-bg cyan
setw -g window-status-current-fg black
set -g window-status-current-style "underscore"

set -g status-interval 5               # set update frequencey (default 15 seconds)
#set -g status-justify left
set -g status-justify centre           # center window list for clarity

#setw -g window-status-format "#[fg=colour0, bg=colour4]#I###W #[fg=colour0]⮁"
#setw -g window-status-current-format "#[fg=colour7, bg=colour4]#I###W #[fg=colour0]⮁"
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
#set -g status-bg colour235 #base02
#set -g status-fg colour137

# set window list colors - red for active and cyan for inactive
setw -g window-status-fg colour138
setw -g window-status-bg colour235
setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr dim

## Background windows with event
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour7
setw -g window-status-bell-attr bold


# show host name and IP address on left side of status bar
#set -g status-left ""
set -g status-left "#[fg=colour198]: #h : #[fg=brightblue]#(curl icanhazip.com) #(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #(ifconfig en3 | grep 'inet ' | awk '{print \"en3 \" $2}') #(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "


##This isn't needed with `tmux` 2.4 or newer.
#set -g @shell_mode 'vi'

# mouse mode (commented lines for old versions of tmux)
# Turn the mouse on, but without copy mode dragging
set -g mouse on
unbind -n MouseDrag1Pane
unbind -Tcopy-mode MouseDrag1Pane

##setw -g mode-mouse on
## set -g mouse-resize-pane on
## set -g mouse-select-pane on
## set -g mouse-select-window on
#bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
#bind -n WheelDownPane select-pane -t= \; send-keys -M

#show-options -g
set -g status-right-length 60
set -g status-left-length 190
if '[ -z "$DISPLAY" -o -n "$SSH_CONNECTION" ]' 'set -g status-right-length 180'

# modes {
#window mode
setw -g clock-mode-colour colour135
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238
# }

# panes {
set -g pane-border-bg colour235
set -g pane-border-fg colour238

# divider color
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51
# }

## Highlight current pane
set -g window-active-style 'fg=colour255,bg=colour232'  # Current pane
set -g window-style 'fg=colour7,bg=colour234'   # Other panes

# messages {
set -g message-fg colour232
set -g message-bg colour14
set -g message-command-fg colour14
set -g message-command-bg colour232
set -g message-attr bold
set -g display-time 5000
set -g repeat-time 1000
# }



# Bind function keys.
bind -n F1 select-window -t 1
bind -n F2 select-window -t 2
bind -n F3 select-window -t 3
bind -n F4 select-window -t 4
bind -n F5 select-window -t 5
bind -n F6 select-window -t 6
bind -n F7 select-window -t 7
bind -n F8 select-window -t 8

#bind : command-prompt

#bind = bind
#source = source-file
#setw = set-window

# colors
## black:  colour232
## white:  colour255
## dark-gray:  colour234
## ligt-gray: colour7
## highlights: colour14
## attention: colour202
## decoration: colour12


# default start/restart
#select-window -t 1

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# tmux-continuum
set -g @continuum-restore 'on'

# gobust
# revshell


# vim copy mode
bind P paste-buffer
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi r send-keys -X rectangle-toggle
bind -T vi-copy y copy-pipe "xclip -sel clip -i"

bind Escape copy-mode
bind ^p pasteb
#bind -T vi-copy v begin-selection
#bind -Tcopy-mode-vi v send -X begin-selection
#bind -T vi-copy y copy-selection
#bind -Tcopy-mode-vi y send -X copy-selection


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'primary' # or 'secondary' or 'clipboard'
set -g @plugin 'tmux-plugins/tmux-copycat'
#set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
#tmux-copycat - a plugin for regex searches in tmux and fast match selection
#tmux-yank - enables copying highlighted text to system clipboard
#tmux-open - a plugin for quickly opening highlighted file or a url
#tmux-continuum - automatic restoring and continuous saving of tmux env

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
#run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux



{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, TypeSynonymInstances, FlexibleContexts, NoMonomorphismRestriction #-}

-- You will need xmonad-contrib and maybe more.

-- Run:    $ xmonad --recompile
-- Launch: $ xmonad --replace
-- [Optional] Create an autostart to command with "xmonad --replace"

import XMonad
import qualified Data.Map as M
import System.Environment (getEnvironment)

import qualified XMonad.StackSet as S
import XMonad.Actions.CycleWS
import XMonad.Config.Desktop
import XMonad.Config.Gnome
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
-- manageHook = manageDocks <+> manageHook defaultConfig,
-- layoutHook = avoidStruts  $  layoutHook defaultConfig,

import XMonad.Hooks.SetWMName
import XMonad.Hooks.ICCCMFocus
import XMonad.Layout.Combo
import XMonad.Layout.Grid
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Named
import XMonad.Layout.NoBorders
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.TwoPane
import XMonad.Layout.WindowNavigation
import XMonad.Util.WindowProperties
import XMonad.Util.EZConfig
-- import XMonad.Util.Run (safeSpawn)
-- import XMonad.Util.Run
import XMonad.Util.Run(spawnPipe)
import XMonad.Layout.ResizableTile
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spacing
import XMonad.Layout.Gaps

import Control.Monad
import Data.Ratio
-- import XMonad.Util.EZConfig(additionalKeys)

import XMonad.Hooks.DynamicLog
-- import XMonad.Hooks.DynamicLog (dynamicLogXinerama, xmobar)
import XMonad.Actions.FindEmptyWorkspace
import XMonad.Layout.IndependentScreens
import XMonad.Actions.Warp
import XMonad.Hooks.UrgencyHook
import System.Exit
import System.IO

import XMonad.Prompt
import XMonad.Actions.TagWindows

import XMonad.Actions.OnScreen (greedyViewOnScreen, viewOnScreen)
import Data.Maybe (fromMaybe)

import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat)

-- workspaces
myWorkspaces = map show [1..12]
-- myWorkspaces = map show [1..9]

-- layouts
basicLayout = Tall nmaster delta ratio
  where
    nmaster = 1
    delta   = 3 / 100
    ratio   = 1 / 2
tallLayout = named "tall" . avoidStruts $ basicLayout
wideLayout = named "wide" . avoidStruts $ Mirror basicLayout
singleLayout = named "single" . avoidStruts $ noBorders Full
fullscreenLayout = named "fullscreen" $ noBorders Full
imLayout = avoidStruts . reflectHoriz $ withIMs ratio rosters chatLayout
  where
    chatLayout      = Grid
    ratio           = 1 % 6
    rosters         = [skypeRoster, pidginRoster]
    pidginRoster    = And (ClassName "Pidgin") (Role "buddy_list")
    skypeRoster     = ClassName "Skype" `And`
                      Not (Title "Options") `And`
                      Not (Role "Chats") `And`
                      Not (Role "CallWindowForm")

myLayoutHook screens = fullscreen $ im normal
  where
    normal     = tallLayout ||| wideLayout ||| singleLayout
    fullscreen = onWorkspaces (withScreens screens ["11"]) fullscreenLayout
    im         = onWorkspace "im" imLayout

-- special treatment for specific windows:
myManageHook = composeAll userDefinedHooks <+> manageHook myBaseConfig
  where
    userDefinedHooks =
      [ webBrowserHook
      , fileBrowserHook
      , terminalHook
      , imClientHook
      , allowFullscreenHook
      ]

    isTerminal = isApplicationGroup ["Gnome-terminal"]
    isIM     = isApplicationGroup ["Pidgin", "Skype"]
    isWebBrowser = isApplicationGroup ["X-www-browser", "Google-chrome", "Firefox"]
    isFileBrowser = isApplicationGroup ["Nautilus"]
    isEclipse = isApplicationGroup ["Eclipse"]

    isApplicationGroup :: [String] -> Query Bool
    isApplicationGroup = foldr1 (<||>) . map (className =?)

    imClientHook = isIM --> addTagsHook ["im_client"]
    terminalHook = isTerminal --> addTagsHook ["terminal"]
    webBrowserHook = isWebBrowser --> addTagsHook ["browser"]
    fileBrowserHook = isFileBrowser --> addTagsHook ["file_browser"]
    eclipseHook = isEclipse --> addTagsHook ["eclipse"]

    -- this will allow anything that says it is fullscreen to go fullscreen: like youtube videos
    allowFullscreenHook = isFullscreen --> doFullFloat

    addTagsHook :: [String] -> ManageHook
    addTagsHook ts = do
      window <- ask
      liftX . sequence . fmap (flip addTag window) $ ts
      idHook


{-
 - Default Spawn Commands
 - Update these using update alternatives as in:
 -    $ update-alternatives --config x-www-browser
 -}
-- myBrowser = "x-www-browser"
-- myBrowser = "chromium-browser"
-- myBrowser = "firefox"
myBrowser = "chromium"
-- myTerminal = "urxvt"
myTerminal = "terminator"
-- myTerminal = "${myTerminal:-xterm}"
myReader = "evince"
myBox = "virtualbox"
myOffice = "soffice"

-- choose which menu runs
-- runMenu = spawn "dmenu_run"
runMenu = gnomeRun


-- mouse bindings that mimic Gnome's
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList
  [ ((altMask, button1), \w -> focus w >> mouseMoveWindow w)
  , ((altMask, button2), \w -> focus w >> mouseResizeWindow w)
  , ((altMask, button3), \w -> focus w >> withFocused (windows . S.sink))
  , ((altMask, button4), const $ windows S.swapUp)
  , ((altMask, button5), const $ windows S.swapDown)
  ]


-- modified version of XMonad.Layout.IM --

-- | Data type for LayoutModifier which converts given layout to IM-layout
-- (with dedicated space for the roster and original layout for chat windows)
data AddRosters a = AddRosters Rational [Property]
                    deriving (Read, Show)

instance LayoutModifier AddRosters Window where
  modifyLayout (AddRosters ratio props) = applyIMs ratio props
  modifierDescription _                = "IMs"

-- | Modifier which converts given layout to IMs-layout (with dedicated
-- space for rosters and original layout for chat windows)
withIMs :: LayoutClass l a => Rational -> [Property] -> l a -> ModifiedLayout AddRosters l a
withIMs ratio props = ModifiedLayout $ AddRosters ratio props

-- | IM layout modifier applied to the Grid layout
gridIMs :: Rational -> [Property] -> ModifiedLayout AddRosters Grid a
gridIMs ratio props = withIMs ratio props Grid

hasAnyProperty :: [Property] -> Window -> X Bool
hasAnyProperty [] _ = return False
hasAnyProperty (p:ps) w = do
  b <- hasProperty p w
  if b then return True else hasAnyProperty ps w

-- | Internal function for placing the rosters specified by
-- the properties and running original layout for all chat windows
applyIMs :: (LayoutClass l Window) =>
    Rational
  -> [Property]
  -> S.Workspace WorkspaceId (l Window) Window
  -> Rectangle
  -> X ([(Window, Rectangle)], Maybe (l Window))
applyIMs ratio props wksp rect = do
  let stack = S.stack wksp
  let ws = S.integrate' stack
  rosters <- filterM (hasAnyProperty props) ws
  let n = fromIntegral $ length rosters
  let (rostersRect, chatsRect) = splitHorizontallyBy (n * ratio) rect
  let rosterRects = splitHorizontally n rostersRect
  let filteredStack = stack >>= S.filter (`notElem` rosters)
  (a,b) <- runLayout (wksp {S.stack = filteredStack}) chatsRect
  return (zip rosters rosterRects ++ a, b)


mateRun :: X ()
mateRun = withDisplay $ \dpy -> do
  rw <- asks theRoot
  mate_panel <- getAtom "_MATE_PANEL_ACTION"
  panel_run   <- getAtom "_MATE_PANEL_ACTION_RUN_DIALOG"

  io $ allocaXEvent $ \e -> do
    setEventType e clientMessage
    setClientMessageEvent e rw mate_panel 32 panel_run 0
    sendEvent dpy rw False structureNotifyMask e
    sync dpy False

myManageHookSimple = composeAll . concat $
    [ [ className =? c               --> doFloat | c <- cFloats ]
    , [ title     =? t               --> doFloat | t <- tFloats ]]
  where cFloats = ["Gimp", "Pidgin", "ROX-Filer"]
        tFloats = ["Firefox Preferences", "Downloads", "Add-ons", "Rename", "Create" ]


bar h = defaultPP {
        ppOutput = hPutStrLn h
        , ppHiddenNoWindows = id
        , ppTitle = xmobarColor "#888888" "" . shorten 50
        , ppCurrent = xmobarColor "#b0393f" "" . wrap "<fc=#9c8e2d>[</fc>" "<fc=#9c8e2d>]</fc>"
        , ppLayout   = xmobarColor "#9c8e2d" "" .
        \sy -> case sy of
                "Spacing 3 ResizableTall" -> " []= "
                "SimplestFloat"           -> " ><> "
                "Full"                    -> " [M] "
                _  -> sy
        , ppSep = " "
        }


-- display
myBorderWidth = 1
myNormalBorderColor = "#7FBC71"
myFocusedBorderColor = "purple"

-- defaults on which we build
-- use e.g. defaultConfig or gnomeConfig
-- myBaseConfig = gnomeConfig
myBaseConfig = desktopConfig
  { terminal = myTerminal
  , keys     = mateKeys <+> keys desktopConfig
     -- , keys = myKeys
--  , keys = myKeysSimple
     --  , keys = myConfKeys
  }
myKeysSimple =
  [ (("M4-f"), spawn "firefox")
  ,(("M4-c"), spawn "chromium")
  ,(("M4-z"), kill)
  ]


-- Mod4 is the Super / Windows key
myModMask = mod4Mask
altMask   = mod1Mask

mateKeys (XConfig {modMask = modm}) = M.fromList $
  [ ((modm, xK_r), spawn "gmrun")
  , ((modm, xK_b         ), spawn "myBrowser")
  , ((modm, xK_c), spawn "chromium")
  , ((modm, xK_Return), spawn myTerminal)
  , ((modm .|. shiftMask, xK_c), kill)
  , ((modm .|. shiftMask, xK_q), spawn "mate-session-save --kill")
  ]


-- put it all together
-- main = do
--     h <- spawnPipe "xmobar ~/.xmonad/xmobarrc"
--     xmonad $ myBaseConfig
--     -- xmonad $ defaultConfig
--       { workspaces = ["www", "float", "gfx", "ink"]
--       , layoutHook = smartBorders $ onWorkspace "float" simplestFloat $ tile ||| Full
--       , logHook =  dynamicLogWithPP (bar h)
--     --  , manageHook = myManageHookSimple <+> manageHook defaultConfig
--       , modMask = myModMask
--       , focusedBorderColor = myFocusedBorderColor
--       , normalBorderColor = myNormalBorderColor
--       , borderWidth = myBorderWidth
--       }
--     -- } `additionalKeysP` myKeys
--   where
--     tile = gaps [(U,17), (D,3), (L,3), (R,3)] $ spacing 3 $ ResizableTall 1 (3/100) (5/8) []


main = do
    nScreens <- countScreens    -- just in case you are on a laptop like me
    xmonad =<< xmobar myBaseConfig
      { modMask = myModMask
      , workspaces = withScreens nScreens myWorkspaces
      , startupHook = setWMName "LG3D"
      , layoutHook = myLayoutHook nScreens
      , manageHook = myManageHook
      , mouseBindings = myMouseBindings
      , logHook = myLogHook
      }
    where
        myLogHook = takeTopFocus


myKeys conf@(XConfig {XMonad.modMask = modMask}) = M.fromList $
  [ ((modMask .|. shiftMask, xK_w), spawn "firefox")
  , ((modMask .|. shiftMask, xK_u), spawn "~/bin/uzblt")
  , ((modMask .|. shiftMask, xK_f), spawn "rox")
  , ((0,               0x1008ff11), spawn "ossv.sh pcm -2")
  , ((0,               0x1008ff12), spawn "ossmix pcm 0:0")
  , ((0,               0x1008ff13), spawn "ossv.sh pcm +2")
  , ((0,               0x1008ff14), spawn "mpc --no-status toggle")
  , ((0,               0x1008ff16), spawn "mpc --no-status prev")
  , ((0,               0x1008ff17), spawn "mpc --no-status next")
  , ((modMask,               xK_space ), sendMessage NextLayout)
  , ((modMask,               xK_j     ), windows S.focusDown)
  , ((modMask,               xK_k     ), windows S.focusUp  )
  , ((modMask,               xK_Return), windows S.swapMaster)
  , ((modMask .|. shiftMask, xK_j     ), windows S.swapDown  )
  , ((modMask .|. shiftMask, xK_k     ), windows S.swapUp    )
  , ((modMask,               xK_h     ), sendMessage Shrink)
  , ((modMask,               xK_l     ), sendMessage Expand)
  , ((modMask .|. controlMask,    xK_j), sendMessage MirrorShrink)
  , ((modMask .|. controlMask,    xK_k), sendMessage MirrorExpand)
  , ((modMask .|. shiftMask, xK_t     ), gets (M.keys . S.floating . windowset)
                                          >>= mapM_ (windows . S.sink))
  , ((modMask              , xK_comma ), sendMessage (IncMasterN 1))
  , ((modMask              , xK_period), sendMessage (IncMasterN (-1)))
  , ((modMask .|. shiftMask, xK_q     ), restart "xmonad" True)
  , ((altMask .|. controlMask, xK_Right      ), nextScreen)
  , ((altMask .|. controlMask, xK_Left       ), prevScreen)
  , ((altMask .|. controlMask, xK_Down       ), shiftPrevScreen)
  , ((altMask .|. controlMask, xK_Up         ), shiftNextScreen)
  , ((altMask .|. controlMask .|. shiftMask, xK_Down       ), shiftPrevScreen >> prevScreen)
  , ((altMask .|. controlMask .|. shiftMask, xK_Up         ), shiftNextScreen >> nextScreen)
  , ((altMask .|. controlMask .|. shiftMask, xK_Left     ), swapPrevScreen) -- this does not work properly
  , ((altMask .|. controlMask .|. shiftMask, xK_Right     ), swapNextScreen)
  ] ++
  [((m .|. modMask, k), windows $ f i)
  | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
  , (f, m) <- [(S.greedyView, 0), (S.shift, shiftMask)]
  ]


myConfKeys conf = M.fromList $
  [ ((myModMask              , xK_Return    ), spawn myTerminal)
  , ((myModMask              , xK_e         ), spawn myReader)
  -- Empty Workspace Movement
  , ((altMask                , xK_space     ), viewEmptyWorkspace)
  , ((altMask .|. shiftMask  , xK_space     ), tagToEmptyWorkspace)
  -- Layout Commands
  , ((myModMask              , xK_space     ), sendMessage NextLayout)
  , ((altMask .|. shiftMask  , xK_Return    ), sendMessage FirstLayout)
  , ((myModMask              , xK_n         ), refresh)
  , ((myModMask              , xK_m         ), windows S.swapMaster)
  -- controlling window movement, position and location
  , ((altMask                , xK_Tab       ), windows S.focusDown >> windowCenter)
  , ((altMask                , xK_BackSpace ), windows S.focusUp >> windowCenter)
  , ((myModMask              , xK_j         ), windows S.swapDown)
  , ((myModMask              , xK_k         ), windows S.swapUp)
  , ((myModMask              , xK_h         ), sendMessage Shrink)
  , ((myModMask              , xK_l         ), sendMessage Expand)
  , ((myModMask              , xK_Down      ), windows S.swapDown)
  , ((myModMask              , xK_Up        ), windows S.swapUp)
  , ((myModMask              , xK_Left      ), sendMessage Shrink)
  , ((myModMask              , xK_Right     ), sendMessage Expand)
  , ((myModMask              , xK_t         ), withFocused $ windows . S.sink)
  , ((myModMask              , xK_v         ), sendMessage (IncMasterN (-1)))
  , ((myModMask              , xK_w         ), sendMessage (IncMasterN 1))
  -- Shutdown commands
  , ((myModMask              , xK_o         ), spawn myOffice)
  , ((myModMask              , xK_q         ), restart "xmonad" True)
  , ((myModMask              , xK_s         ), spawn "gksudo pm-hibernate")
  , ((myModMask .|. shiftMask, xK_q         ), spawn "gksudo shutdown -P now")
  , ((myModMask .|. shiftMask, xK_w         ), spawn "gnome-screensaver-command -l")
  , ((myModMask              , xK_x         ), spawn myBox)
  -- Print Screen
  , ((myModMask              , xK_Print     ), spawn "gnome-screenshot")
  , ((altMask                , xK_Print     ), spawn "gnome-screenshot -a")
  , ((controlMask, xK_Print), spawn "sleep 0.2; scrot -s")
  -- , ((0, xK_Print), spawn "scrot")
  -- MPC and Volume commands
  , ((myModMask               , xK_Page_Up), spawn "mpc next")
  , ((myModMask               , xK_Page_Down), spawn "mpc prev")
  , ((myModMask               , xK_Pause), spawn "mpc toggle")
  , ((myModMask               , xK_Home), spawn "amixer -c0 -- sset Master Playback 2dB+")
  , ((myModMask               , xK_End), spawn "amixer -c0 -- sset Master Playback 2dB-")
  -- Screen Movement
  --, ((controlMask              , xK_Tab       ), nextScreen >> windowCenter)
  --, ((controlMask .|. shiftMask, xK_Tab       ), prevScreen >> windowCenter)
  , ((altMask .|. controlMask, xK_Right      ), nextScreen >> windowCenter)
  , ((altMask .|. controlMask, xK_Left       ), prevScreen >> windowCenter)
  , ((altMask .|. controlMask, xK_Down       ), shiftPrevScreen)
  , ((altMask .|. controlMask, xK_Up         ), shiftNextScreen)
  , ((altMask .|. controlMask .|. shiftMask, xK_Down       ), shiftPrevScreen >> prevScreen >> windowCenter)
  , ((altMask .|. controlMask .|. shiftMask, xK_Up         ), shiftNextScreen >> nextScreen >> windowCenter)
  , ((altMask .|. controlMask .|. shiftMask, xK_Left     ), swapPrevScreen) -- this does not work properly
  , ((altMask .|. controlMask .|. shiftMask, xK_Right     ), swapNextScreen)
  , ((myModMask              , xK_z         ), windowCenter)
  -- Tagging Windows
  , ((myModMask              ,   xK_g  ), tagPrompt defaultXPConfig (withFocused . addTag))
  , ((myModMask .|. shiftMask,   xK_g  ), tagDelPrompt defaultXPConfig)
  , ((altMask                ,   xK_g  ), tagPrompt defaultXPConfig (`withTaggedGlobalP` gotoWindow))
  ] ++
  -- Alt+F1..F10 switches to workspace
  -- mod+F1..F10 moves window to workspace
  -- (Alt is in a nicer location for the thumb than the Windows key,
  -- and 1..9 keys are already in use by Firefox, irssi, ...)
  [ ((m, k), f i)
      | (i, k) <- zip (workspaces' conf) workspaceKeys
      , (f, m) <- [(windowsGreedyView, altMask), (windowsShift, myModMask)]
  ] ++
  -- mod+alt+F1..F10 moves window to workspace and switches to that workspace
  [ ((myModMask .|. altMask, k), windowsShift i >> windowsGreedyView i >> windowCenter)
      | (i, k) <- zip (workspaces' conf) workspaceKeys
  ]
  where
      -- workspaceKeys = [xK_KP_1 .. xK_KP_9]
      workspaceKeys = [xK_F1 .. xK_F12]
      windowsShift      = windows . onCurrentScreen S.shift
      windowsGreedyView = windows . onCurrentScreen S.greedyView
      windowCenter = warpToWindow (1 % 6) (1 % 6)

      gotoWindow :: Window -> WindowSet -> WindowSet
      gotoWindow window ws = case S.findTag window ws of
                               Just i -> viewOnScreen (screenIdFromTag i) i ws
                               Nothing -> ws
          where
             screenIdFromTag :: WorkspaceId -> ScreenId
             screenIdFromTag = S . read . takeWhile (/= '_')
